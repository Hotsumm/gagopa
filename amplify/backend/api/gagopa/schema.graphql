type Picture @model @key(name: "picturesByUserId", fields: ["authorId"]) {
  id: ID!
  authorId: ID!
  city: String!
  title: String!
  location: String!
  author: User @connection(fields: ["authorId"])
  instagram: String
  description: String
  attachment: S3Object
  likes: [PictureLike]
    @connection(keyName: "pictureLikesByPictureId", fields: ["id"])
  comments: [Comment]
    @connection(keyName: "commentsByPictureId", fields: ["id"])
}

type User @model(subscriptions: null) @key(fields: ["userId"]) {
  userId: ID!
  pictures: [Picture]
    @connection(keyName: "picturesByUserId", fields: ["userId"])
  avatar: S3Object
  username: String
  email: String
}

type Comment @model @key(name: "commentsByPictureId", fields: ["pictureId"]) {
  id: ID!
  pictureId: ID!
  authorId: ID!
  text: String!
  likes: [CommentLike]
    @connection(keyName: "commentLikesByCommentId", fields: ["id"])
  author: User @connection(fields: ["authorId"])
  picture: Picture @connection(fields: ["pictureId"])
}

type Menu @model {
  id: ID!
  city: String!
  tag: String
  content: String
  thumbnail: S3Object
}

type PictureLike
  @model
  @key(name: "pictureLikesByPictureId", fields: ["pictureId"])
  @key(
    name: "pictureLikesByUser"
    fields: ["userId", "createdAt"]
    queryField: "likesByUser"
  ) {
  id: ID!
  pictureId: ID!
  userId: ID!
  user: User @connection(fields: ["userId"])
  picture: Picture @connection(fields: ["pictureId"])
  createdAt: String!
}

type CommentLike
  @model
  @key(name: "commentLikesByCommentId", fields: ["commentId"]) {
  id: ID!
  userId: ID!
  pictureId: ID!
  commentId: ID!
  user: User @connection(fields: ["userId"])
  picture: Picture @connection(fields: ["pictureId"])
  createdAt: String!
}

type S3Object {
  bucket: String!
  region: String
  key: String!
  uri: String!
}
